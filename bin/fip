#!/bin/bash

HELP="Usage: fip [parse|get]

common:
-h             --help              Show this help

fip get:
-c <committee> --committee         Committee of the match
-l             --list           *  List all available matches
-r <range>     --range          *  List all matches in the range
-m <match>     --match          *  Number of the match
-f <query>     --find           *  Search for a match with a given query

fip parse:
-i <input>     --input             Input file"

HELP_GET="Usage: fip get [-c <committee>] [-l|-m <match>|-f <query>] 

-h             --help              Show this help
-c <committee> --committee         Committee of the match
-l             --list           *  List all available matches
-r <range>     --range          *  List all matches in the range
-m <match>     --match          *  Number of the match
-f <query>     --find           *  Search for a match with a given query"

HELP_PARSE="Usage: fip parse [-i <input>]

-h             --help              Show this help
-i <input>     --input             Input file"

# Parse arguments
case $1 in
parse)
    mode="parse"
    shift
    ;;
get)
    mode="get"
    shift
    ;;
-h | --help)
    echo "$HELP" >&2
    exit 0
    ;;
*)
    echo "Provide one of [parse|get] first." >&2
    exit 1
    ;;
esac

while [[ "$#" -gt 0 ]]; do
    # First check the first argument

    case $1 in
    -h | --help)
        echo "$HELP"
        exit 0
        ;;
    -c | --committee)
        committee="$2"
        shift
        ;;
    -l | --list)
        list=1
        ;;
    -r | --range)
        range="$2"
        shift
        ;;
    -m | --match)
        match="$2"
        shift
        ;;
    -f | --find)
        find="$2"
        shift
        ;;
    -i | --input)
        input="$2"
        shift
        ;;
    *)
        echo "Unknown parameter passed: $1"
        exit 1
        ;;
    esac
    shift
done

# Get base dir of the script
script_path="$(dirname "$0")"
src_path="$(realpath "$script_path/../src")"
parse_exec="python3 $(realpath "$src_path/message_parser.py")"
source "$src_path/fipfunctions.sh"

if [[ "$mode" == "parse" ]]; then
    # Explicit help
    if [[ -n "$help" ]]; then
        echo "$HELP_PARSE" >&2
        exit 0
    fi

    # Wrong parameters
    if [[ -n "$committee" || -n "$list" || -n "$range" || -n "$match" || -n "$find" ]]; then
        echo "$HELP_PARSE" >&2
        exit 1
    fi

    # No input file
    if [[ -z "$input" ]]; then
        echo "$HELP_PARSE" >&2
        exit 1
    fi

    echo "Parsing $input..."
    echo "$parse_exec" --input "$(realpath "$input")" | bash | jq

elif [[ "$mode" == "get" ]]; then
    # Explicit help
    if [[ -n "$help" ]]; then
        echo "$HELP_GET" >&2
        exit 0
    fi

    # Wrong parameters
    if [[ -n "$input" ]]; then
        echo "$HELP_GET" >&2
        exit 1
    fi

    # No committee
    if [[ -z "$committee" ]]; then
        echo "Provide a committee." >&2
        echo "$HELP_GET" >&2
        exit 1
    fi

    # Exactly one of list, match, find or range must be set
    if [[ -n "$list" && -z "$match" && -z "$find" && -z "$range" ]] ||
        [[ -z "$list" && -n "$match" && -z "$find" && -z "$range" ]] ||
        [[ -z "$list" && -z "$match" && -n "$find" && -z "$range" ]] ||
        [[ -z "$list" && -z "$match" && -z "$find" && -n "$range" ]]; then
        printf ""
    else
        echo "Provide exactly one of [list|match|find|range]." >&2
        echo "$HELP_GET" >&2
        exit 1
    fi

    if [[ -n "$list" ]]; then
        echo "Listing matches for committee $committee..." >&2
        echo "This may take a while. To stop, press Ctrl+C." >&2
        getdata_list "$committee"
    elif [[ -n "$range" ]]; then
        start="$(echo "$range" | cut -d '-' -f 1)"
        end="$(echo "$range" | cut -d '-' -f 2)"

        if [[ -z "$start" || -z "$end" ]]; then
            echo "Error: Invalid range." >&2
            exit 1
        fi

        if [[ "$start" -gt "$end" ]]; then
            echo "Error: Start match is greater than end match." >&2
            exit 1
        fi

        if [[ "$start" -le 0 ]]; then
            echo "Error: Start match is less than or equal to zero." >&2
            exit 1
        fi

        echo "Listing matches for committee $committee from match $start to match $end..." >&2
        echo "This may take a while. To stop, press Ctrl+C." >&2
        getdata_list "$committee" "$start" "$end"
    elif [[ -n "$match" ]]; then
        echo "Getting match $match for committee $committee..." >&2
        getdata_given "$committee" "$match"
    elif [[ -n "$find" ]]; then
        echo "Finding match for committee $committee..." >&2
        getdata_find "$committee" "$find"
    fi
fi
